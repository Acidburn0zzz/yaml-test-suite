#!/usr/bin/env perl
use strict;
use warnings;
use 5.010;
use Data::Dumper;
use FindBin '$Bin';
use YAML::XS qw/ DumpFile /;
use Getopt::Long;
use File::Basename qw/ basename /;
use IO::All;
use File::Path qw/ rmtree /;

GetOptions(
    "path=s" => \my $path,
    "help|h" => \my $help,
);

usage() if @ARGV < 1;
usage() if $help;

my ($framework) = @ARGV;

my $data = "$Bin/../data";

my %tests;

my $start = time;
my $end;

my @frameworks = qw/
    js-yaml-json

    java-json

    libyaml-event

    nimyaml-event

    perl5-pegex-event

    perl5-pm-pl
    perl5-pm-json

    perl5-pp-event

    perl5-syck-pl
    perl5-syck-json

    perl5-tiny-pl
    perl5-tiny-json

    perl5-xs-pl
    perl5-xs-json

    perl6-json
    perl6-p6
    pyyaml-event
    ruby-json

/;
my %frameworks;
@frameworks{ @frameworks } = (1) x @frameworks;

my $out = "$data/out";
if ($frameworks{ $framework }) {
    mkdir $out;
    if ($path) {
        my @dirs = grep { m{/[A-Z0-9]{4}$} } map { "$_" } io->dir($data)->all;
        for my $dir (sort @dirs) {
            my $id = basename $dir;
            my $in_yaml = "$dir/in.yaml";
            my $cmd = "timeout 3 $path < $in_yaml > $out/$id.error 2>&1";
            say "Running $id";
            system $cmd;
            unless ($?) {
                rename "$out/$id.error", "$out/$id.ok" or die $!;
            }
        }
    }
    else {
        usage() if (not $ENV{YAML_EDITOR} or not -d $ENV{YAML_EDITOR});
        my $path = " /yaml-editor/sbin/$framework";
        if ($framework eq 'java-json') {
            $path = "/bin/java-json";
        }
        elsif ($framework eq 'nimyaml-event') {
            $path = "/bin/nimyaml-event";
        }
        my $cmd = q{docker run -i}
            . q{ -v $PWD/data:/yaml-test-suite-data}
            . q{ -v $PWD/bin:/matrix}
            . qq{ -v $ENV{YAML_EDITOR}:/yaml-editor}
            . qq{ yamlio/yaml-editor /matrix/run-framework-tests-docker.sh $path};
        say "Running $cmd";
        system $cmd;
    }
    $end = time;
}
else {
    die "Framework $framework not supported";
}

my @files = map { "$_" } grep { m{/\w+\.(error|ok)$} } io->dir("$data/out")->all;
for my $file (sort @files) {
    my @got = io->file($file)->chomp->slurp;
    $file = basename $file;
    my ($id, $status) = split m/\./, $file;
    my @test_events = io->file("$data/$id/test.event")->chomp->slurp;
    my ($title) = io->file("$data/$id/===")->chomp->slurp;
    say "Comparing results for $id";
    my $got_data = (join "\n", @got) . "\n";
    $tests{ $id }->{got_data} = $got_data;
    if ($status eq 'error') {
        $tests{ $id }->{error} = 1;
        my $msg = $got_data;
        $msg =~ s/\bat \S+ line .*//s;
        $tests{ $id }->{msg} = $msg;
    }
    elsif ($framework =~ m/-json$/) {
        my $got_json = $got_data;
        $tests{ $id }->{got_json} = $got_json;
        if (-f "$data/$id/in.json") {
            my $exp_json = io->file("$data/$id/in.json")->slurp;
            require Mojo::JSON;
            my $exp_data = Mojo::JSON::decode_json($exp_json);
            $exp_json = Mojo::JSON::encode_json($exp_data);
            my $got_data = eval { Mojo::JSON::decode_json($got_json) };
            $got_json = Mojo::JSON::encode_json($got_data);
            if ($got_json eq $exp_json) {
                $tests{ $id }->{json_ok} = 1;
            }
            else {
                $tests{ $id }->{json_diff} = 1;
            }
        }
        else {
            $tests{ $id }->{na} = 1;
        }
    }
    elsif ($framework =~ m/-pl$/) {
        $tests{ $id }->{na} = 1;
    }
    else {
        my @events = @got;
        if ("@events" eq "@test_events") {
            $tests{ $id }->{ok} = 1;
        }
        else {
            $tests{ $id }->{diff} = 1;
#                $tests{ $id }->{exp_events} = \@test_events;
            $tests{ $id }->{got_events} = \@got;
        }
    }
    $tests{ $id }->{title} = $title;
}
rmtree $out;

say "Saving tests into $Bin/../matrix/$framework.yaml";
DumpFile("$Bin/../matrix/$framework.yaml", {
    tests => \%tests,
    date => time,
    time => $end - $start,
});

sub usage {
    say <<"EOM";

Usage:

Run in docker:
    YAML_EDITOR=/path/to/yaml-editor-repo $0 <framework>

Specify a script:
    $0 <framework> --path /path/to/framework

If no --path is given, it will run the tests in docker.
EOM
    exit 1;
}
